###Proc16. Описать функцию Sign(X) целого типа, возвращающую для вещественного числа X следующие значения:
###−1, если X < 0; 0, если X = 0; 1, если X > 0.С помощью этой функции найти значение выражения Sign(A) + Sign(B)
###для данных вещественных чисел A и B.
##def sign(x):
##    if x<0:
##        return -1
##    elif x>0:
##        return 1
##    else:
##        return 0
##a=int(input())
##b=int(input())
##print(sign(a)+sign(b))
##Proc17. Описать функцию RootsCount(A, B, C) целого типа, определяющую
##количество корней квадратного уравнения A·x
##2 + B·x + C = 0 (A, B, C —
##вещественные параметры, A 6= 0). С ее помощью найти количество корней
##для каждого из трех квадратных уравнений с данными коэффициентами.
##Количество корней определять по значению дискриминанта:
##D = B2 − 4·A·C.
##def roots_count(A, B, C):
##    D = B*B - 4*A*C
##    if D>0:
##        return 2
##    elif D==0:
##        return 1
##    else:
##        return 0
##
##a=int(input())
##b=int(input())
##c=int(input())
##print(roots_count(a,b,c))
###Proc18. Описать функцию CircleS(R) вещественного типа, находящую площадь круга радиуса R (R — вещественное). С помощью этой функции
###найти площади трех кругов с данными радиусами. Площадь круга радиуса R вычисляется по формуле S = π·R2
###. В качестве значения π использовать 3.14.
##def circles(R):
##    S= 3.14*R*R
##    return S
##for i in range(3):
##    r=int(input())
##    print(circles(r))
####Proc19. Описать функцию RingS(R1, R2) вещественного типа, находящую площадь кольца, заключенного между двумя окружностями с общим центром
####и радиусами R1 и R2 (R1 и R2 — вещественные, R1 > R2). С ее помощью
####найти площади трех колец, для которых даны внешние и внутренние радиусы. Воспользоваться формулой площади круга радиуса R: S = π·R2.
####В качестве значения π использовать 3.14.
##print("Введите два радиуса причем R1>R2")
##def ring_s(R1, R2):
##    S1=3.14*R1*R1
##    S2=3.14*R2*R2
##    S3=S1-S2
##    return S3
##for i in range(3):
##    r1=int(input())
##    r2=int(input())
##    print(ring_s(r1,r2))
####Proc20. Описать функцию TriangleP(a, h), находящую периметр равнобедренного треугольника по его основанию a и высоте h, проведенной к
####основанию (a и h — вещественные). С помощью этой функции найти
####периметры трех треугольников, для которых даны основания и высоты.
####Для нахождения боковой стороны b треугольника использовать теорему
####Пифагора:
####b2 = (a/2)2 + h2
##import math
##def triangle_p(a,h):
##    b = math.sqrt((a/2)*(a/2)+h*h)
##    return b
##for i in range(3):
##    a=int(input())
##    h=int(input())
##    print(triangle_p(a,h))
####Proc21◦ Описать функцию SumRange(A, B) целого типа, находящую сумму
####всех целых чисел от A до B включительно (A и B — целые). Если A > B,то функция возвращает 0. С помощью этой функции найти суммы чисел
####от A до B и от B до C, если даны числа A, B, C.
##def sum_range(A, B):
##    if A>B:
##        return 0
##    else:
##        C=0
##        for i in range(a,b+1):
##            C+=i
##        return C
##a=int(input())
##b=int(input())
##print(sum_range(a,b))
####Proc22. Описать функцию Calc(A, B, Op) вещественного типа, выполняющую
####над ненулевыми вещественными числами A и B одну из арифметических
####операций и возвращающую ее результат. Вид операции определяется целым параметром Op: 1 — вычитание, 2 — умножение, 3 — деление, остальные значения — сложение. С помощью Calc выполнить для данных A и B
####операции, определяемые данными целыми N1, N2, N3.    
##def calc(A, B, Op):
##    if Op==1:
##        O=A-B
##    elif Op==2:
##        O=A*B
##    elif Op==3:
##        O=A/B
##    else:
##        O=A+B
##    return O
##a=int(input())
##b=int(input())
##Op=int(input())
##print(calc(a,b,Op))
####Proc23. Описать функцию Quarter(x, y) целого типа, определяющую номер
####координатной четверти, в которой находится точка с ненулевыми вещественными координатами (x, y). С помощью этой функции найти номера
####координатных четвертей для трех точек с данными ненулевыми координатами.
##import random
##def quarter(x, y):
##    if x>0 and y>0:
##        ch=1
##    elif x<0 and y>0:
##        ch=2
##    elif x<0 and y<0:
##        ch=3
##    elif x>0 and y<0:
##        ch=4
##    return ch
##for i in range(3):
##    x=random.randint(-15,15)
##    y=random.randint(-15,15)
##    print("x=",x,"y=",y,"ch=",quarter(x,y))
####Proc24. Описать функцию Even(K) логического типа, возвращающую TRUE,
####если целый параметр K является четным, и FALSE в противном случае. С
####ее помощью найти количество четных чисел в наборе из 10 целых чисел.
##import random
##def even(K):
##    if K%2==0:
##        return True
##    else:
##        return False
##for i in range(10):
##    x=random.randint(1,100)
##    print("x=",x,even(x))
##Proc25◦ Описать функцию IsSquare(K) логического типа, возвращающую
##TRUE, если целый параметр K (> 0) является квадратом некоторого целого числа, и FALSE в противном случае. С ее помощью найти количество
##квадратов в наборе из 10 целых положительных чисел.
import math
import random
def is_square(K):
    if math.sqrt(K)!=a*a:
        return False
    else:
        return True
for i in range (10):
    x=random.randint(1,100)
    print("x=",x,is_square(x))
